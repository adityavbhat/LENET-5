import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from torchvision import datasets, transforms
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Define the LeNet-5 architecture
class LeNet5(nn.Module):
    def __init__(self):
        super(LeNet5, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, kernel_size=5, stride=1, padding=2)
        self.act1 = nn.Tanh()
        self.avg_pool1 = nn.AvgPool2d(kernel_size=2, stride=2)

        self.conv2 = nn.Conv2d(6, 16, kernel_size=5, stride=1)
        self.act2 = nn.Tanh()
        self.avg_pool2 = nn.AvgPool2d(kernel_size=2, stride=2)

        self.conv3 = nn.Conv2d(16, 120, kernel_size=5, stride=1)
        self.act3 = nn.Tanh()

        self.flatten = nn.Flatten()

        self.fc1 = nn.Linear(120, 84)
        self.act4 = nn.Tanh()

        self.fc2 = nn.Linear(84, 10)
        self.act5 = nn.Softmax(dim=1)

    def forward(self, x):
        x = self.avg_pool1(self.act1(self.conv1(x)))
        x = self.avg_pool2(self.act2(self.conv2(x)))
        x = self.act3(self.conv3(x))
        x = self.flatten(x)
        x = self.act4(self.fc1(x))
        x = self.act5(self.fc2(x))
        return x

# Load the MNIST dataset
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])
train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)

# Create DataLoader
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# Instantiate the LeNet-5 model
model = LeNet5()

# Set device and move the model to the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
num_epochs = 10

for epoch in range(num_epochs):
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    print(f"Epoch {epoch + 1}, Loss: {loss.item()}")

# Test the model
test_loader = DataLoader(test_dataset, batch_size=len(test_dataset), shuffle=False)

model.eval()
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        test_outputs = model(images)
        _, predicted = torch.max(test_outputs, 1)

accuracy = accuracy_score(labels.cpu().numpy(), predicted.cpu().numpy())
print(f"Test Accuracy: {accuracy}")
